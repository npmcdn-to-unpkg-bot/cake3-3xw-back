!function(scope) {
    function CopyLink(note) {
        better.AbstractCommand.call(this, note);
    }
    function ShowFiles(note) {
        better.AbstractCommand.call(this, note);
    }
    function AddEventListeners(note) {
        better.AbstractCommand.call(this, note);
    }
    function LoadAjax(note) {
        better.AbstractCommand.call(this, note);
    }
    function SetModal(note) {
        better.AbstractCommand.call(this, note);
    }
    function Modal(mediatorName, viewComponent) {
        better.AbstractMediator.call(this, mediatorName, viewComponent);
    }
    function AttachmentIndex() {
        better.AbstractFacade.call(this, null);
    }
    if (null == scope && (scope = window), !scope.attachmentIndex) {
        var Process = {
            INIT: "INIT",
            SHOW_UPLOAD_MANY: "SHOW_UPLOAD_MANY",
            SHOW_EMBED: "SHOW_EMBED"
        }, Notification = {
            ADD_EVENT_LISTENERS: "ADD_EVENT_LISTENERS",
            LOAD_AJAX: "LOAD_AJAX",
            SET_MODAL: "SET_MODAL",
            LOCK_MODAL: "LOCK_MODAL",
            UNLOCK_MODAL: "UNLOCK_MODAL",
            SHOW_MODAL: "SHOW_MODAL",
            HIDE_MODAL: "HIDE_MODAL",
            EMPTY_MODAL: "EMPTY_MODAL",
            SET_MODAL_BOY: "SET_MODAL_BOY",
            SHOW_FILES: "SHOW_FILES",
            COPY_LINK: "COPY_LINK"
        };
        CopyLink.prototype = new better.AbstractCommand(), CopyLink.prototype.constructor = ShowFiles,
        CopyLink.prototype.execute = function(notification) {
            window.prompt("Copy to clipboard: Ctrl+C, Enter", notification.body.link);
        }, ShowFiles.prototype = new better.AbstractCommand(), ShowFiles.prototype.constructor = ShowFiles,
        ShowFiles.prototype.execute = function(notification) {
            window.location = this.facade.getRessource("settings").site_url + "attachments/index";
        }, AddEventListeners.prototype = new better.AbstractCommand(), AddEventListeners.prototype.constructor = AddEventListeners,
        AddEventListeners.prototype.execute = function(notification) {
            this.facade.registerEventHandler("upload-many", $("#upload-many").get(0), "click", {
                name: Process.SHOW_UPLOAD_MANY,
                body: {
                    urls: [ this.facade.getRessource("settings").site_url + "attachments/uploadmany" ],
                    asBody: [ !0 ],
                    title: "Upload file(s) to your website"
                },
                type: null
            }), this.facade.registerEventHandler("add-embed", $("#add-embed").get(0), "click", {
                name: Process.SHOW_EMBED,
                body: {
                    urls: [ this.facade.getRessource("settings").site_url + "attachments/embed" ],
                    asBody: [ !0 ],
                    title: "Add Embed file to your website"
                },
                type: null
            }), this.facade.registerEventHandler("attachment-modal", $("#attachment-modal"), "hide.bs.modal", {
                name: Notification.EMPTY_MODAL,
                body: null,
                type: null
            }), this.nextCommand();
        }, LoadAjax.prototype = new better.AbstractCommand(), LoadAjax.prototype.constructor = LoadAjax,
        LoadAjax.prototype.execute = function(notification) {
            var url = notification.body.urls.shift();
            $.ajax({
                url: url,
                dataType: "html",
                context: this
            }).fail(this.fail).done(this.done);
        }, LoadAjax.prototype.fail = function() {
            alert("Une erreur c'est produite lors du chargement des donn√©es");
        }, LoadAjax.prototype.done = function(data) {
            var whichRessource = this.notification.body.asBody.shift() ? "modal-body" : "loadingData";
            this.facade.setRessource(whichRessource, data), this.facade.setRessource("modal-title", this.notification.body.title),
            this.nextCommand();
        }, SetModal.prototype = new better.AbstractCommand(), SetModal.prototype.constructor = SetModal,
        SetModal.prototype.execute = function(notification) {
            this.facade.goTo(Notification.SET_MODAL_BOY), this.facade.goTo(Notification.SHOW_MODAL),
            this.nextCommand();
        };
        var Mediator = {
            MODAL: "MODAL",
            MAIN_LIST: "MAIN_LIST"
        };
        Modal.prototype = new better.AbstractMediator(), Modal.prototype.constructor = Modal,
        Modal.prototype.listNotificationInterests = function() {
            return [ Notification.SHOW_MODAL, Notification.HIDE_MODAl, Notification.SET_MODAL_BOY, Notification.LOCK_MODAL, Notification.UNLOCK_MODAL ];
        }, Modal.prototype.handleNotification = function(notification) {
            switch (notification.name) {
              case Notification.SHOW_MODAL:
                this.viewComponent.modal("show");
                break;

              case Notification.HIDE_MODAL:
                this.viewComponent.modal("hide");

              case Notification.EMPTY_MODAL:
                $("#attachment-modal .modal-body").empty(), $("#attachment-modal .modal-title").empty();
                break;

              case Notification.SET_MODAL_BOY:
                $("#attachment-modal .modal-body").html(this.facade.getRessource("modal-body")),
                $("#attachment-modal .modal-title").html(this.facade.getRessource("modal-title")),
                $("#tagsinput").tagsinput({
                    confirmKeys: [ 32 ]
                }), $(scope).trigger("resize");
                break;

              case Notification.LOCK_MODAL:
                this.viewComponent.modal("lock");
                break;

              case Notification.UNLOCK_MODAL:
                this.viewComponent.modal("unlock");
            }
        }, AttachmentIndex.prototype = new better.AbstractFacade(), AttachmentIndex.prototype.constructor = AttachmentIndex,
        AttachmentIndex.prototype.initServices = function(configObject) {
            this.registerService(better.AttachmentUploadManyService.NAME, better.AttachmentUploadManyService, {}),
            Notification.upMany = better.AttachmentUploadManyService.Dictionary.Notification,
            Process.upMany = better.AttachmentUploadManyService.Dictionary.Process, this.registerService(better.AttachmentEmbedService.NAME, better.AttachmentEmbedService, {}),
            Notification.embed = better.AttachmentEmbedService.Dictionary.Notification, Process.embed = better.AttachmentEmbedService.Dictionary.Process;
        }, AttachmentIndex.prototype.initRessources = function(configObject) {
            this.setRessource("settings", attachment_add_settings), this.setRessource("attachments", attachments);
        }, AttachmentIndex.prototype.initMediators = function(configObject) {
            this.registerMediator(new Modal(Mediator.MODAL, $("#attachment-modal")));
        }, AttachmentIndex.prototype.initCommands = function(configObject) {
            this.registerCommand(Notification.ADD_EVENT_LISTENERS, AddEventListeners), this.registerCommand(Notification.LOAD_AJAX, LoadAjax),
            this.registerCommand(Notification.SET_MODAL, SetModal), this.registerCommand(Notification.SHOW_FILES, ShowFiles),
            this.registerCommand(Notification.COPY_LINK, CopyLink);
        }, AttachmentIndex.prototype.initProcesses = function(configObject) {
            this.registerProcess(Process.SHOW_UPLOAD_MANY, [ Notification.LOAD_AJAX, Notification.SET_MODAL, Process.upMany.INIT_UI ]),
            this.registerProcess(Process.SHOW_EMBED, [ Notification.LOAD_AJAX, Notification.SET_MODAL, Process.embed.INIT_UI ]);
        }, AttachmentIndex.prototype.bootstrap = function() {
            $("#attachment-filter-by-tags-input").tagsinput({
                confirmKeys: [ 32 ]
            }), this.goTo(Notification.ADD_EVENT_LISTENERS, {});
        }, ready = function() {
            scope.attachmentIndex = new AttachmentIndex(), scope.attachmentIndex.init();
        }, scope.onload = ready;
    }
}(this);
