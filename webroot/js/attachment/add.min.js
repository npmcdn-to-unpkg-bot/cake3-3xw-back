!function(scope) {
    function AddFileToList(note) {
        better.AbstractCommand.call(this, note);
    }
    function RemoveFileFromList(note) {
        better.AbstractCommand.call(this, note);
    }
    function AddEventListeners(note) {
        better.AbstractCommand.call(this, note);
    }
    function LoadAjax(note) {
        better.AbstractCommand.call(this, note);
    }
    function SetModal(note) {
        better.AbstractCommand.call(this, note);
    }
    function Modal(mediatorName, viewComponent) {
        better.AbstractMediator.call(this, mediatorName, viewComponent);
    }
    function MainList(mediatorName, viewComponent) {
        better.AbstractMediator.call(this, mediatorName, viewComponent);
    }
    function AttachmentAdd() {
        better.AbstractFacade.call(this, null);
    }
    if (null == scope && (scope = window), !scope.attachmentAdd) {
        var Process = {
            INIT: "INIT",
            SHOW_UPLOAD_MANY: "SHOW_UPLOAD_MANY",
            SHOW_CHOOSE_MANY: "SHOW_CHOOSE_MANY",
            SHOW_EMBED: "SHOW_EMBED"
        }, Notification = {
            ADD_EVENT_LISTENERS: "ADD_EVENT_LISTENERS",
            LOAD_AJAX: "LOAD_AJAX",
            EMPTY_MODAL: "EMPTY_MODAL",
            SET_MODAL: "SET_MODAL",
            LOCK_MODAL: "LOCK_MODAL",
            UNLOCK_MODAL: "UNLOCK_MODAL",
            SHOW_MODAL: "SHOW_MODAL",
            HIDE_MODAL: "HIDE_MODAL",
            SET_MODAL_BOY: "SET_MODAL_BOY",
            SHOW_FILES: "SHOW_FILES",
            REMOVE_FILE_FROM_LIST: "REMOVE_FILE_FROM_LIST",
            ADD_FILE_TO_LIST: "ADD_FILE_TO_LIST"
        };
        AddFileToList.prototype = new better.AbstractCommand(), AddFileToList.prototype.constructor = AddFileToList, 
        AddFileToList.prototype.execute = function(notification) {
            var file = notification.body.file || eval("(" + $("#attachment-selection-id-" + notification.body.id + " .attachment-data-json").html() + ")"), files = this.facade.getRessource("attachments"), settings = this.facade.getRessource("settings");
            "belongsTo" == settings.relations ? files = [ file ] : files.push(file), this.facade.setRessource("attachments", files), 
            this.facade.goTo(Notification.SHOW_FILES), this.nextCommand();
        }, RemoveFileFromList.prototype = new better.AbstractCommand(), RemoveFileFromList.prototype.constructor = RemoveFileFromList, 
        RemoveFileFromList.prototype.execute = function(notification) {
            for (var id = notification.body.id, files = this.facade.getRessource("attachments"), newFiles = [], i = 0; i < files.length; i++) files[i].id != id && newFiles.push(files[i]);
            this.facade.setRessource("attachments", newFiles), this.nextCommand();
        }, AddEventListeners.prototype = new better.AbstractCommand(), AddEventListeners.prototype.constructor = AddEventListeners, 
        AddEventListeners.prototype.execute = function(notification) {
            this.facade.registerEventHandler("choose-many", $("#choose-many").get(0), "click", {
                name: Process.SHOW_CHOOSE_MANY,
                body: {
                    urls: [ this.facade.getRessource("settings").site_url + "attachments/browse" ],
                    asBody: [ !1 ],
                    browseType: "index",
                    enableMany: !0,
                    title: "Choose existing file(s) from your website"
                },
                type: null
            }), this.facade.registerEventHandler("upload-many", $("#upload-many").get(0), "click", {
                name: Process.SHOW_UPLOAD_MANY,
                body: {
                    urls: [ this.facade.getRessource("settings").site_url + "attachments/uploadmany" ],
                    asBody: [ !0 ],
                    title: "Upload file(s) to your website"
                },
                type: null
            }), this.facade.registerEventHandler("add-embed", $("#add-embed").get(0), "click", {
                name: Process.SHOW_EMBED,
                body: {
                    urls: [ this.facade.getRessource("settings").site_url + "attachments/embed" ],
                    asBody: [ !0 ],
                    title: "Add Embed file to your website"
                },
                type: null
            }), this.facade.registerEventHandler("attachment-modal", $("#attachment-modal"), "hide.bs.modal", {
                name: Notification.EMPTY_MODAL,
                body: null,
                type: null
            }), this.nextCommand();
        }, LoadAjax.prototype = new better.AbstractCommand(), LoadAjax.prototype.constructor = LoadAjax, 
        LoadAjax.prototype.execute = function(notification) {
            var url = notification.body.urls.shift(), ajax = {
                url: url,
                dataType: "html",
                context: this
            };
            if (notification.body.datas) {
                var data = notification.body.datas.shift();
                ajax.data = data;
            }
            $.ajax(ajax).fail(this.fail).done(this.done);
        }, LoadAjax.prototype.fail = function() {
            alert("Une erreur c'est produite lors du chargement des donnÃ©es");
        }, LoadAjax.prototype.done = function(data) {
            var whichRessource = this.notification.body.asBody.shift() ? "modal-body" : "loadingData";
            this.facade.setRessource(whichRessource, data), this.facade.setRessource("modal-title", this.notification.body.title), 
            this.nextCommand();
        }, SetModal.prototype = new better.AbstractCommand(), SetModal.prototype.constructor = SetModal, 
        SetModal.prototype.execute = function(notification) {
            this.facade.goTo(Notification.SET_MODAL_BOY), this.facade.goTo(Notification.SHOW_MODAL), 
            this.nextCommand();
        };
        var Mediator = {
            MODAL: "MODAL",
            MAIN_LIST: "MAIN_LIST"
        };
        Modal.prototype = new better.AbstractMediator(), Modal.prototype.constructor = Modal, 
        Modal.prototype.listNotificationInterests = function() {
            return [ Notification.SHOW_MODAL, Notification.HIDE_MODAl, Notification.EMPTY_MODAL, Notification.SET_MODAL_BOY, Notification.LOCK_MODAL, Notification.UNLOCK_MODAL ];
        }, Modal.prototype.handleNotification = function(notification) {
            switch (notification.name) {
              case Notification.SHOW_MODAL:
                this.viewComponent.modal("show");
                break;

              case Notification.HIDE_MODAL:
                this.viewComponent.modal("hide");

              case Notification.EMPTY_MODAL:
                $("#attachment-modal .modal-body").empty(), $("#attachment-modal .modal-title").empty();
                break;

              case Notification.SET_MODAL_BOY:
                $("#attachment-modal .modal-body").html(this.facade.getRessource("modal-body")), 
                $("#attachment-modal .modal-title").html(this.facade.getRessource("modal-title")), 
                $("#tagsinput").tagsinput({
                    confirmKeys: [ 32 ]
                }), $(scope).trigger("resize");
                break;

              case Notification.LOCK_MODAL:
                this.viewComponent.modal("lock");
                break;

              case Notification.UNLOCK_MODAL:
                this.viewComponent.modal("unlock");
            }
        }, MainList.prototype = new better.AbstractMediator(), MainList.prototype.constructor = MainList, 
        MainList.prototype.listNotificationInterests = function() {
            return [ Notification.SHOW_FILES, Notification.REMOVE_FILE_FROM_LIST ];
        }, MainList.prototype.handleNotification = function(notification) {
            switch (notification.name) {
              case Notification.SHOW_FILES:
                this.showFiles();
                break;

              case Notification.REMOVE_FILE_FROM_LIST:
                $("#attachment-item-" + notification.body.id).remove();
            }
            this.sortFiles(), $(".attachment-list-sortable").sortable(), $(".attachment-list-sortable").disableSelection(), 
            $(".attachment-list-sortable").unbind("sortstop", this.sortFiles), $(".attachment-list-sortable").bind("sortstop", this.sortFiles);
        }, MainList.prototype.sortFiles = function(notification) {
            var settings = window.attachmentAdd.getRessource("settings");
            "belongsTo" != settings.relations && $(".attachment-thumb-display ").each(function(i, elem) {
                var $elem = $(elem);
                $elem.find(".attchment-input-id").attr("name", "attachments[" + i + "][id]"), $elem.find(".attchment-input-order").attr("name", "attachments[" + i + "][_joinData][position]"), 
                $elem.find(".attchment-input-order").val(i);
            });
        }, MainList.prototype.showFiles = function(notification) {
            this.viewComponent.empty();
            for (var files = this.facade.getRessource("attachments"), settings = this.facade.getRessource("settings"), i = 0; i < files.length; i++) {
                var file = files[i], $item = $($("#attachment-item-template").html());
                switch ($item.find(".attachment-title").html(file.name), $item.find(".attachment-details").html(file.size + " KB - " + file.type + "/" + file.subtype), 
                file.subtype) {
                  case "jpg":
                  case "jpeg":
                  case "gif":
                  case "png":
                    $item.find("img").attr("src", settings.site_url + "image.php?image=" + settings.site_url + "webroot/" + file.path + "&width=677&cropratio=16:9");
                    break;

                  case "vimeo":
                  case "youtube":
                    $item.find("img").attr("src", settings.site_url + "image.php?image=" + file.path + "&width=677&cropratio=16:9");
                    break;

                  default:
                    $item.find("img").attr("src", "http://placehold.it/677x381&text=" + file.type + "/" + file.subtype);
                }
                ("youtube" == file.subtype || "vimeo" == file.subtype) && $item.addClass("video_thumb "), 
                $item.attr("id", "attachment-item-" + file.id), $item.find(".attachment-actions").append("<button type=\"button\" onclick=\"window.attachmentAdd.goTo('REMOVE_FILE_FROM_LIST',{ id: '" + file.id + '\' });" class="btn btn-danger">Delete</button>'), 
                $item.find(".attchment-input-id").val(file.id), "belongsTo" == settings.relations && $item.find(".attchment-input-id").attr("name", settings.field), 
                this.viewComponent.append($item);
            }
        }, AttachmentAdd.prototype = new better.AbstractFacade(), AttachmentAdd.prototype.constructor = AttachmentAdd, 
        AttachmentAdd.prototype.initServices = function(configObject) {
            this.registerService(better.AttachmentUploadManyService.NAME, better.AttachmentUploadManyService, {}), 
            Notification.upMany = better.AttachmentUploadManyService.Dictionary.Notification, 
            Process.upMany = better.AttachmentUploadManyService.Dictionary.Process, this.registerService(better.AttachmentChoosedManyService.NAME, better.AttachmentChoosedManyService, {}), 
            Notification.chooseMany = better.AttachmentChoosedManyService.Dictionary.Notification, 
            Process.chooseMany = better.AttachmentChoosedManyService.Dictionary.Process, this.registerService(better.AttachmentEmbedService.NAME, better.AttachmentEmbedService, {}), 
            Notification.embed = better.AttachmentEmbedService.Dictionary.Notification, Process.embed = better.AttachmentEmbedService.Dictionary.Process;
        }, AttachmentAdd.prototype.initRessources = function(configObject) {
            this.setRessource("settings", attachment_add_settings), this.setRessource("attachments", attachments);
        }, AttachmentAdd.prototype.initMediators = function(configObject) {
            this.registerMediator(new Modal(Mediator.MODAL, $("#attachment-modal"))), this.registerMediator(new MainList(Mediator.MAIN_LIST, $("#attachment-list .row")));
        }, AttachmentAdd.prototype.initCommands = function(configObject) {
            this.registerCommand(Notification.ADD_EVENT_LISTENERS, AddEventListeners), this.registerCommand(Notification.LOAD_AJAX, LoadAjax), 
            this.registerCommand(Notification.SET_MODAL, SetModal), this.registerCommand(Notification.REMOVE_FILE_FROM_LIST, RemoveFileFromList), 
            this.registerCommand(Notification.ADD_FILE_TO_LIST, AddFileToList);
        }, AttachmentAdd.prototype.initProcesses = function(configObject) {
            this.registerProcess(Process.INIT, [ Notification.ADD_EVENT_LISTENERS, Notification.SHOW_FILES ]), 
            this.registerProcess(Process.SHOW_UPLOAD_MANY, [ Notification.LOAD_AJAX, Notification.SET_MODAL, Process.upMany.INIT_UI ]), 
            this.registerProcess(Process.SHOW_CHOOSE_MANY, [ Notification.LOAD_AJAX, Notification.SET_MODAL, Process.chooseMany.INIT_UI ]), 
            this.registerProcess(Process.SHOW_EMBED, [ Notification.LOAD_AJAX, Notification.SET_MODAL, Process.embed.INIT_UI ]);
        }, AttachmentAdd.prototype.bootstrap = function() {
            this.goTo(Process.INIT, {});
        }, ready = function() {
            scope.attachmentAdd = new AttachmentAdd(), scope.attachmentAdd.init();
        }, scope.onload = ready;
    }
}(this);