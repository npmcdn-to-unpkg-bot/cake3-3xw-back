var _superModal = $.fn.modal;

$.extend(_superModal.Constructor.DEFAULTS, {
    locked: !1
});

var _hide = _superModal.Constructor.prototype.hide;

$.extend(_superModal.Constructor.prototype, {
    lock: function() {
        this.options.locked = !0;
    },
    unlock: function() {
        this.options.locked = !1;
    },
    hide: function() {
        this.options.locked || _hide.apply(this, arguments);
    }
}), function(scope) {
    function Notifier() {}
    function NotificationHeader(processName, pid, step, time) {
        this.processName = processName, this.pid = pid, this.step = step, this.time = time;
    }
    function Notification(name, body, type, header) {
        this.name = name, this.body = body, this.type = type, this.header = header;
    }
    function Observer(notifyMethod, notifyContext) {
        this.setNotifyMethod(notifyMethod), this.setNotifyContext(notifyContext);
    }
    function AbstractProxy(proxyName, data) {
        this.proxyName = proxyName || this.constructor.NAME, null != data && this.setData(data);
    }
    function AbstractMediator(mediatorName, viewComponent) {
        this.mediatorName = mediatorName || this.constructor.NAME, this.viewComponent = viewComponent;
    }
    function AbstractCommand(notification) {
        this.notification = notification;
    }
    function AbstractService(facade, name, configObject) {
        this.facade = facade, this.name = name, this.initializeService(configObject);
    }
    function Processor() {
        this.processMap = {}, this.activeProcesses = {};
    }
    function Sequencer() {}
    function CronJob(responder, labelOrName, delay, note, stopCount) {
        this.responder = responder, this.labelOrName = labelOrName, this.delay = delay, 
        this.note = note, this.stopCount = stopCount || -1, this.counter = 0;
    }
    function EventHandler() {}
    function Process(pid, tasksArray) {
        this.pid = pid, this.step = 0, this.tasksArray = tasksArray, this.state = this.constructor.READY;
    }
    function View() {
        this.mediatorMap = [], this.observerMap = [];
    }
    function Model() {
        this.proxyMap = [], this.ressources = {};
    }
    function Controller() {
        this.commandMap = [], this.processor = new Processor(), this.sequencer = new Sequencer(), 
        this.eventHandler = new EventHandler();
    }
    function AbstractFacade() {
        this._initializeFacade();
    }
    if (null == scope && (scope = window), !scope.better) {
        Notifier.prototype.sendNotification = function(notificationName, body, type) {
            this.facade && this.facade.sendNotification(notificationName, body, type);
        }, Notifier.prototype.facade = null, NotificationHeader.prototype.kill = function() {
            this.processName = null, this.pid = null, this.time = null, this.step = null;
        }, NotificationHeader.prototype.processName = null, NotificationHeader.prototype.pid = null, 
        NotificationHeader.prototype.time = null, NotificationHeader.prototype.step = null, 
        Notification.prototype.getHeader = function() {
            return this.header;
        }, Notification.prototype.setHeader = function(header) {
            this.header = header;
        }, Notification.prototype.getName = function() {
            return this.name;
        }, Notification.prototype.getBody = function() {
            return this.body;
        }, Notification.prototype.setBody = function(body) {
            this.body = body;
        }, Notification.prototype.getType = function() {
            return this.type;
        }, Notification.setType = function(type) {
            this.type = type;
        }, Notification.prototype.name = null, Notification.prototype.body = null, Notification.prototype.type = null, 
        Notification.prototype.header = null, Observer.prototype = new Notifier(), Observer.prototype.constructor = Observer, 
        Observer.prototype.setNotifyMethod = function(notifyMethod) {
            this.notify = notifyMethod;
        }, Observer.prototype.setNotifyContext = function(notifyContext) {
            this.context = notifyContext;
        }, Observer.prototype.getNotifyMethod = function() {
            return this.notify;
        }, Observer.prototype.getNotifyContext = function() {
            return this.context;
        }, Observer.prototype.notifyObserver = function(notification) {
            this.getNotifyMethod().call(this.getNotifyContext(), notification);
        }, Observer.prototype.compareNotifyContext = function(object) {
            return object === this.context;
        }, Observer.prototype.notify = null, Observer.prototype.context = null, AbstractProxy.prototype = new Notifier(), 
        AbstractProxy.prototype.constructor = AbstractProxy, AbstractProxy.prototype.getProxyName = function() {
            return this.proxyName;
        }, AbstractProxy.prototype.setData = function(data) {
            this.data = data;
        }, AbstractProxy.prototype.getData = function() {
            return this.data;
        }, AbstractProxy.prototype.onRegister = function() {}, AbstractProxy.prototype.onRemove = function() {}, 
        AbstractProxy.NAME = "AbstractProxy", AbstractProxy.prototype.proxyName = null, 
        AbstractProxy.prototype.data = null, AbstractMediator.prototype = new Notifier(), 
        AbstractMediator.prototype.constructor = AbstractMediator, AbstractMediator.prototype.getMediatorName = function() {
            return this.mediatorName;
        }, AbstractMediator.prototype.setViewComponent = function(viewComponent) {
            this.viewComponent = viewComponent;
        }, AbstractMediator.prototype.getViewComponent = function() {
            return this.viewComponent;
        }, AbstractMediator.prototype.listNotificationInterests = function() {
            return [];
        }, AbstractMediator.prototype.handleNotification = function(notification) {}, AbstractMediator.prototype.onRegister = function() {}, 
        AbstractMediator.prototype.onRemove = function() {}, AbstractMediator.prototype.mediatorName = null, 
        AbstractMediator.prototype.viewComponent = null, AbstractMediator.NAME = "AbstractMediator", 
        AbstractCommand.prototype = new Notifier(), AbstractCommand.prototype.constructor = AbstractCommand, 
        AbstractCommand.prototype.execute = function(notification) {}, AbstractCommand.prototype.nextCommand = function() {
            this.notification && this.notification.header && this.notification.header.processName && this.facade.nextCommand(this.notification), 
            this.kill();
        }, AbstractCommand.prototype.kill = function() {
            this.facade = null, this.notification = null, this.execute = null;
        }, AbstractCommand.prototype.notification = null, AbstractService.prototype = new Notifier(), 
        AbstractService.prototype.constructor = AbstractService, AbstractService.prototype.initializeService = function(configObject) {
            this.initProxies(configObject), this.initMediators(configObject), this.initCommands(configObject), 
            this.initProcesses(configObject), this.runInstall(configObject);
        }, AbstractService.prototype.initProxies = function(configObject) {}, AbstractService.prototype.initMediators = function(configObject) {}, 
        AbstractService.prototype.initCommands = function(configObject) {}, AbstractService.prototype.initProcesses = function(configObject) {}, 
        AbstractService.prototype.runInstall = function(configObject) {}, AbstractService.prototype.removeService = function() {
            this.removeProxies(), this.removeMediators(), this.removeCommands(), this.removeProcesses(), 
            this.runUninstall();
        }, AbstractService.prototype.removeProxies = function() {}, AbstractService.prototype.removeMediators = function() {}, 
        AbstractService.prototype.removeCommands = function() {}, AbstractService.prototype.removeProcesses = function() {}, 
        AbstractService.prototype.runUninstall = function() {}, AbstractService.prototype.name = null, 
        AbstractService.prototype.facade = null, Processor.prototype.hasProcess = function(processName) {
            return !!this.processMap[processName];
        }, Processor.prototype.registerProcess = function(processName, tasksArray) {
            this.processMap[processName] = new Process(Processor.getNewProcessId(), tasksArray);
        }, Processor.prototype.removeProcess = function(processName) {
            delete this.processMap[processName];
        }, Processor.prototype.extractTasksFromProcess = function(processName) {
            var tasks = [];
            for (var i in this.processMap[processName].tasksArray) {
                var task = this.processMap[processName].tasksArray[i];
                this.processMap.hasOwnProperty(task) ? tasks = Array.prototype.concat(tasks, this.extractTasksFromProcess(task)) : tasks.push(task);
            }
            return tasks;
        }, Processor.prototype.execute = function(processName, body, type) {
            this.processMap.hasOwnProperty(processName) ? (this.processMap[processName].tasksArray = this.extractTasksFromProcess(processName), 
            this.processMap[processName].step = 0, this.facade.log("Processor -> start " + processName), 
            this.activeProcesses[this.processMap[processName].pid] = this.processMap[processName], 
            this._exec(processName, body, type)) : this.facade.log("! Processor -> process " + processName + " dosen't exist");
        }, Processor.prototype.nextCommand = function(notification) {
            var processName = notification.header.processName;
            if (this.processMap.hasOwnProperty(processName)) if (this.processMap[processName].isOver()) this.processMap[processName].state = Process.READY, 
            delete this.activeProcesses[this.processMap[processName].pid], this.facade.log("Processor -> process " + processName + " is Finished"); else {
                this.processMap[processName].step++;
                var body = notification.getBody(), type = notification.getType();
                notification.header.kill(), notification.header = null, notification.body = null, 
                notification.type = null, notification = null, this._exec(processName, body, type), 
                processName = null, body = null, type = null;
            } else this.facade.log("! Processor -> process " + processName + " dosen't exist");
        }, Processor.prototype._exec = function(processName, body, type) {
            var process = this.processMap[processName];
            process.state = Process.RUNNING;
            var task = process.getCurrentTask(), header = new NotificationHeader(processName, process.pid, process.step, new Date());
            this.facade.log("Processor -> _exec task: " + task), this.facade.sendNotification(task, body, type, header), 
            process = null;
        }, Processor.prototype.processMap = null, Processor.prototype.facade = null, Processor.prototype.activeProcesses = null, 
        Processor.getNewProcessId = function() {
            return Processor.lastProcessId++;
        }, Processor.lastProcessId = 0, Sequencer.prototype.facade = null, Sequencer.prototype._cronStack = {}, 
        Sequencer.prototype._animationFrameStack = {}, Sequencer.prototype._runningFrameStack = [], 
        Sequencer.prototype._isFrameLoopRunnig = !1, Sequencer.prototype.goTo = function(label, body, type) {
            null == body && (body = {}), this._exec(label, body, type);
        }, Sequencer.prototype.cronExec = function(note) {
            this.goTo(note.name, note.body, note.type);
        }, Sequencer.prototype._exec = function(label, body, type) {
            this.facade.controller.processor.hasProcess(label) ? this.facade.controller.processor.execute(label, body, type) : this.facade.sendNotification(label, body, type);
        }, Sequencer.prototype.registerAnimationFrameJob = function(labelOrName, note) {
            this._animationFrameStack[labelOrName] = note;
        }, Sequencer.prototype.startAnimationFrameJob = function(labelOrName) {
            if (this._animationFrameStack[labelOrName]) {
                for (var doesJobExists = !1, i = 0; i < this._runningFrameStack.length; i++) this._runningFrameStack[i] == labelOrName && (doesJobExists = !0);
                doesJobExists || this._runningFrameStack.push(labelOrName), this._isFrameLoopRunnig || (this.facade.log("Start Animation Frame loop"), 
                this._isFrameLoopRunnig = !0, this.loop());
            }
        }, Sequencer.prototype.stopAnimationFrameJob = function(labelOrName, andDestroy) {
            if (this._animationFrameStack[labelOrName]) {
                for (var newStack = [], i = 0; i < this._runningFrameStack.length; i++) this._runningFrameStack[i] != labelOrName && (newStack = this._runningFrameStack[i]);
                this._runningFrameStack = newStack, 0 == this._runningFrameStack.length && (this.facade.log("Stop Animation Frame loop"), 
                this._isFrameLoopRunnig = !1), andDestroy && delete this._animationFrameStack[labelOrName];
            }
        }, Sequencer.prototype.stopAllAnimationFrameJob = function(andDestroy) {
            for (var i in this._cronStack) this._runningFrameStack = [], this.facade.log("Stop Animation Frame loop"), 
            this._isFrameLoopRunnig = !1, andDestroy && (this._animationFrameStack = {});
        }, Sequencer.prototype.loop = function() {
            if (this._isFrameLoopRunnig) {
                requestAnimationFrame(function(self) {
                    return function() {
                        self.loop();
                    };
                }(this));
                for (var i = 0; i < this._runningFrameStack.length; i++) this.cronExec(this._animationFrameStack[this._runningFrameStack[i]]);
            }
        }, Sequencer.prototype.registerCronJob = function(labelOrName, delay, note, stopCount) {
            if (this._cronStack[labelOrName]) {
                var cron = this._cronStack[labelOrName];
                cron.stop(), cron.labelOrName = labelOrName, cron.delay = delay, cron.note = note, 
                cron.stopCount = stopCount;
            } else this._cronStack[labelOrName] = new CronJob(this, labelOrName, delay, note, stopCount);
        }, Sequencer.prototype.startCronJob = function(labelOrName) {
            this._cronStack[labelOrName] && this._cronStack[labelOrName].start();
        }, Sequencer.prototype.stopCronJob = function(labelOrName, andDestroy) {
            this._cronStack[labelOrName] && (this._cronStack[labelOrName].stop(), andDestroy && (this._cronStack[labelOrName].destroy(), 
            delete this._cronStack[labelOrName]));
        }, Sequencer.prototype.stopAllCronJob = function(andDestroy) {
            for (var i in this._cronStack) this._cronStack[i].stop(), andDestroy && (this._cronStack[i].destroy(), 
            delete this._cronStack[i]);
        }, CronJob.prototype.start = function() {
            this.isRunning = !0, this.id = setInterval(function(self) {
                return function() {
                    self.tick();
                };
            }(this), this.delay);
        }, CronJob.prototype.tick = function() {
            return this.stopCount < 0 ? void this.responder.cronExec(this.note) : (this.counter++, 
            this.responder.cronExec(this.note), this.counter == this.stopCount && clearInterval(this.id), 
            void (this.counter == Number.MAX_VALUE && (this.counter = 0)));
        }, CronJob.prototype.stop = function() {
            this.counter = 0, clearInterval(this.id), this.isRunning = !1;
        }, CronJob.prototype.destroy = function() {
            this.stop(), this.responder = null, this.labelOrName = null, this.delay = 0, this.note = null, 
            this.stopCount = 0, this.counter = 0;
        }, CronJob.prototype.id = null, CronJob.prototype.note = null, CronJob.prototype.counter = null, 
        CronJob.prototype.responder = null, CronJob.prototype.delay = null, CronJob.prototype.stopCount = null, 
        CronJob.prototype.labelOrName = null, CronJob.prototype.isRunning = !1, EventHandler.prototype.facade = null, 
        EventHandler.prototype._handlerStack = {}, EventHandler.prototype.registerEventHandler = function(labelOrName, element, event, note, useCapture, stopPropagation) {
            this._handlerStack[labelOrName] = {
                element: element,
                event: event,
                note: note,
                useCapture: useCapture,
                stopPropagation: stopPropagation
            };
            var self = this, listener = this.handleEvent, getEvent = this.getEvent;
            element.jquery ? stopPropagation ? element.bind(event, function(evt) {
                evt.stopPropagation(), evt.preventDefault(), listener(self, labelOrName, evt, element);
            }, useCapture) : element.bind(event, function(evt) {
                listener(self, labelOrName, evt, element);
            }, useCapture) : element.addEventListener ? stopPropagation ? element.addEventListener(event, function(evt) {
                evt.stopPropagation(), evt.preventDefault(), listener(self, labelOrName, evt, element);
            }, useCapture) : element.addEventListener(event, function(evt) {
                listener(self, labelOrName, evt, element);
            }, useCapture) : element.attachEvent ? stopPropagation ? element.attachEvent("on" + event, function(evt) {
                evt = getEvent(evt), evt.stopPropagation ? evt.stopPropagation() : evt.cancelBubble = !0, 
                evt.preventDefault && evt.preventDefault(), listener(self, labelOrName, evt, element);
            }) : element.attachEvent("on" + event, function(evt) {
                evt = getEvent(evt), listener(self, labelOrName, evt, element);
            }) : stopPropagation ? element["on" + event] = function(evt) {
                evt = getEvent(evt), evt.stopPropagation ? evt.stopPropagation() : evt.cancelBubble = !0, 
                evt.preventDefault && evt.preventDefault(), listener(self, labelOrName, evt, element);
            } : element["on" + event] = function(evt) {
                evt = getEvent(evt), listener(self, labelOrName, evt, element);
            };
        }, EventHandler.prototype.removeEventHandler = function(labelOrName) {
            if (this._handlerStack[labelOrName]) {
                var listener = this.handleEvent;
                this._handlerStack[labelOrName].element.jquery ? this._handlerStack[labelOrName].element.unbind(this._handlerStack[labelOrName].event, listener, this._handlerStack[labelOrName].useCapture) : this._handlerStack[labelOrName].element.removeEventListener ? this._handlerStack[labelOrName].element.removeEventListener(this._handlerStack[labelOrName].event, listener, this._handlerStack[labelOrName].useCapture) : this._handlerStack[labelOrName].element.detachEvent ? this._handlerStack[labelOrName].element.detachEvent("on" + this._handlerStack[labelOrName].event, listener) : this._handlerStack[labelOrName].element["on" + this._handlerStack[labelOrName].event] = null, 
                delete this._handlerStack[labelOrName];
            }
        }, EventHandler.prototype.getEvent = function(e) {
            return e || (e = window.event), e.srcElement && (e.target = e.srcElement), e;
        }, EventHandler.prototype.handleEvent = function(self, labelOrName, evt, element) {
            if (self._handlerStack[labelOrName]) {
                var obj = better.clone(self._handlerStack[labelOrName].note);
                obj.body = obj.body || {}, obj.body.event = evt, obj.body.target = this, self.facade.goTo(obj.name, obj.body, obj.type);
            }
        }, EventHandler.prototype.doesHandleEvent = function(labelOrName) {
            return !!this._handlerStack[labelOrName];
        }, Process.prototype.getCurrentTask = function() {
            return this.tasksArray[this.step];
        }, Process.prototype.isOver = function() {
            return this.step == this.tasksArray.length - 1;
        }, Process.prototype.pid = null, Process.prototype.step = null, Process.prototype.tasksArray = null, 
        Process.READY = "Process.READY", Process.RUNNING = "Process.RUNNING", Process.CRASHED = "Process.CRASHED", 
        View.prototype.registerObserver = function(notificationName, observer) {
            null != this.observerMap[notificationName] ? this.observerMap[notificationName].push(observer) : this.observerMap[notificationName] = [ observer ];
        }, View.prototype.notifyObservers = function(notification) {
            if (null != this.observerMap[notification.getName()]) {
                for (var observer, observers_ref = this.observerMap[notification.getName()], observers = [], i = 0; i < observers_ref.length; i++) observer = observers_ref[i], 
                observers.push(observer);
                for (var i = 0; i < observers.length; i++) observer = observers[i], observer.notifyObserver(notification);
            }
        }, View.prototype.removeObserver = function(notificationName, notifyContext) {
            for (var observers = this.observerMap[notificationName], i = 0; i < observers.length; i++) if (1 == observers[i].compareNotifyContext(notifyContext)) {
                observers.splice(i, 1);
                break;
            }
            0 == observers.length && delete this.observerMap[notificationName];
        }, View.prototype.registerMediator = function(mediator) {
            if (null == this.mediatorMap[mediator.getMediatorName()]) {
                mediator.facade = this.facade, this.mediatorMap[mediator.getMediatorName()] = mediator;
                var interests = mediator.listNotificationInterests();
                if (interests.length > 0) for (var observer = new Observer(mediator.handleNotification, mediator), i = 0; i < interests.length; i++) this.registerObserver(interests[i], observer);
                mediator.onRegister();
            }
        }, View.prototype.retrieveMediator = function(mediatorName) {
            return this.mediatorMap[mediatorName];
        }, View.prototype.removeMediator = function(mediatorName) {
            var mediator = this.mediatorMap[mediatorName];
            if (mediator) {
                for (var interests = mediator.listNotificationInterests(), i = 0; i < interests.length; i++) this.removeObserver(interests[i], mediator);
                delete this.mediatorMap[mediatorName], mediator.onRemove();
            }
            return mediator;
        }, View.prototype.hasMediator = function(mediatorName) {
            return null != this.mediatorMap[mediatorName];
        }, View.prototype.facade = null, View.prototype.mediatorMap = null, View.prototype.observerMap = null, 
        Model.prototype.registerProxy = function(proxy) {
            proxy.facade = this.facade, this.proxyMap[proxy.getProxyName()] = proxy, proxy.onRegister();
        }, Model.prototype.retrieveProxy = function(proxyName) {
            return this.proxyMap[proxyName];
        }, Model.prototype.hasProxy = function(proxyName) {
            return null != this.proxyMap[proxyName];
        }, Model.prototype.removeProxy = function(proxyName) {
            var proxy = this.proxyMap[proxyName];
            return proxy && (this.proxyMap[proxyName] = null, proxy.onRemove()), proxy;
        }, Model.prototype.facade = null, Model.prototype.proxyMap = null, Model.prototype.ressources = null, 
        Controller.prototype.executeCommand = function(note) {
            var commandClassRef = this.commandMap[note.getName()];
            if (null != commandClassRef) {
                var commandInstance = new commandClassRef(note);
                commandInstance.facade = this.facade, commandInstance.notification = note, commandInstance.execute(note);
            }
        }, Controller.prototype.registerCommand = function(notificationName, commandClassRef) {
            null == this.commandMap[notificationName] && this.view.registerObserver(notificationName, new Observer(this.executeCommand, this)), 
            this.commandMap[notificationName] = commandClassRef;
        }, Controller.prototype.hasCommand = function(notificationName) {
            return null != this.commandMap[notificationName];
        }, Controller.prototype.removeCommand = function(notificationName) {
            this.hasCommand(notificationName) && (this.view.removeObserver(notificationName, this), 
            this.commandMap[notificationName] = null);
        }, Controller.prototype.facade = null, Controller.prototype.view = null, Controller.prototype.commandMap = null, 
        Controller.prototype.processor = null, Controller.prototype.sequencer = null, Controller.prototype.eventHandler = null, 
        AbstractFacade.prototype.log = function(obj) {
            AbstractFacade.log(obj);
        }, AbstractFacade.prototype.goTo = function(label, body, type) {
            this.controller.sequencer.goTo(label, body, type);
        }, AbstractFacade.prototype.doesHandleEvent = function(labelOrName) {
            return this.controller.eventHandler.doesHandleEvent(labelOrName);
        }, AbstractFacade.prototype.registerEventHandler = function(labelOrName, element, event, note, useCapture, stopPropagation) {
            this.controller.eventHandler.registerEventHandler(labelOrName, element, event, note, useCapture, stopPropagation);
        }, AbstractFacade.prototype.removeEventHandler = function(labelOrName) {
            this.controller.eventHandler.removeEventHandler(labelOrName);
        }, AbstractFacade.prototype.registerAnimationFrameJob = function(labelOrName, note) {
            this.controller.sequencer.registerAnimationFrameJob(labelOrName, note);
        }, AbstractFacade.prototype.startAnimationFrameJob = function(labelOrName) {
            this.controller.sequencer.startAnimationFrameJob(labelOrName);
        }, AbstractFacade.prototype.stopAnimationFrameJob = function(labelOrName, andDestroy) {
            this.controller.sequencer.stopAnimationFrameJob(labelOrName, andDestroy);
        }, AbstractFacade.prototype.stopAllAnimationFrameJob = function(andDestroy) {
            this.controller.sequencer.stopAllAnimationFrameJob(andDestroy);
        }, AbstractFacade.prototype.registerCronJob = function(labelOrName, delay, note, stopCount) {
            this.controller.sequencer.registerCronJob(labelOrName, delay, note, stopCount);
        }, AbstractFacade.prototype.startCronJob = function(labelOrName) {
            this.controller.sequencer.startCronJob(labelOrName);
        }, AbstractFacade.prototype.stopCronJob = function(labelOrName, andDestroy) {
            this.controller.sequencer.stopCronJob(labelOrName, andDestroy);
        }, AbstractFacade.prototype.stopAllCronJob = function(andDestroy) {
            this.controller.sequencer.stopAllCronJob(andDestroy);
        }, AbstractFacade.prototype._initializeFacade = function() {
            this.view = new View(), this.controller = new Controller(), this.model = new Model(), 
            this.view.facade = this, this.controller.facade = this, this.controller.view = this.view, 
            this.controller.processor.facade = this, this.controller.sequencer.facade = this, 
            this.controller.eventHandler.facade = this, this.model.facade = this, this.stackMode = !1, 
            this.stack = [], this.servicesMap = {};
        }, AbstractFacade.prototype.init = function(configObject) {
            this.initServices(configObject), this.initRessources(configObject), this.initProxies(configObject), 
            this.initMediators(configObject), this.initCommands(configObject), this.initProcesses(configObject), 
            this.initHandlers(configObject), this.initSequences(configObject), this.bootstrap(configObject);
        }, AbstractFacade.prototype.initRessources = function(configObject) {}, AbstractFacade.prototype.initProxies = function(configObject) {}, 
        AbstractFacade.prototype.initMediators = function(configObject) {}, AbstractFacade.prototype.initCommands = function(configObject) {}, 
        AbstractFacade.prototype.initProcesses = function(configObject) {}, AbstractFacade.prototype.initServices = function(configObject) {}, 
        AbstractFacade.prototype.initHandlers = function(configObject) {}, AbstractFacade.prototype.initSequences = function(configObject) {}, 
        AbstractFacade.prototype.bootstrap = function(configObject) {}, AbstractFacade.prototype.registerService = function(name, serviceClass, configObject) {
            this.servicesMap.hasOwnProperty(name) || (this.servicesMap[name] = new serviceClass(this, name, configObject), 
            this.log("Service " + name + " has been added to your Application"));
        }, AbstractFacade.prototype.removeService = function(name) {
            this.servicesMap.hasOwnProperty(name) && (this.servicesMap[name].removeService(), 
            delete this.servicesMap[name]);
        }, AbstractFacade.prototype.registerProcess = function(processName, tasksArray) {
            this.controller.processor.registerProcess(processName, tasksArray);
        }, AbstractFacade.prototype.removeProcess = function(processName) {
            this.controller.processor.removeProcess(processName);
        }, AbstractFacade.prototype.execute = function(processName, body, type) {
            this.controller.processor.execute(processName, body, type);
        }, AbstractFacade.prototype.nextCommand = function(notification) {
            this.controller.processor.nextCommand(notification);
        }, AbstractFacade.prototype.registerCommand = function(notificationName, commandClassRef) {
            this.controller.registerCommand(notificationName, commandClassRef);
        }, AbstractFacade.prototype.removeCommand = function(notificationName) {
            this.controller.removeCommand(notificationName);
        }, AbstractFacade.prototype.hasCommand = function(notificationName) {
            return this.controller.hasCommand(notificationName);
        }, AbstractFacade.prototype.getRessource = function(name) {
            return this.model.ressources[name];
        }, AbstractFacade.prototype.setRessource = function(name, obj) {
            this.model.ressources[name] = obj;
        }, AbstractFacade.prototype.registerProxy = function(proxy) {
            this.model.registerProxy(proxy);
        }, AbstractFacade.prototype.retrieveProxy = function(proxyName) {
            return this.model.retrieveProxy(proxyName);
        }, AbstractFacade.prototype.removeProxy = function(proxyName) {
            var proxy = null;
            return null != this.model && (proxy = this.model.removeProxy(proxyName)), proxy;
        }, AbstractFacade.prototype.hasProxy = function(proxyName) {
            return this.model.hasProxy(proxyName);
        }, AbstractFacade.prototype.registerMediator = function(mediator) {
            null != this.view && (this.view.registerMediator(mediator), this.log("Mediator " + mediator.mediatorName + " has been registered"));
        }, AbstractFacade.prototype.retrieveMediator = function(mediatorName) {
            return this.view.retrieveMediator(mediatorName);
        }, AbstractFacade.prototype.removeMediator = function(mediatorName) {
            var mediator = null;
            return null != this.view && (mediator = this.view.removeMediator(mediatorName)), 
            mediator;
        }, AbstractFacade.prototype.hasMediator = function(mediatorName) {
            return this.view.hasMediator(mediatorName);
        }, AbstractFacade.prototype.sendNotification = function(notificationName, body, type, header) {
            this.stack.push(new Notification(notificationName, body, type, header)), this.flushStack();
        }, AbstractFacade.prototype.flushStack = function() {
            if (0 != this.stack.length) if (this.isStackMode) setTimeout(this.flushStack, 300); else {
                var note = this.stack.shift();
                this.notifyObservers(note), this.stack.length > 0 && setTimeout(this.flushStack, 300);
            }
        }, AbstractFacade.prototype.notifyObservers = function(notification) {
            null != this.view && this.view.notifyObservers(notification);
        }, AbstractFacade.prototype.view = null, AbstractFacade.prototype.controller = null, 
        AbstractFacade.prototype.model = null, AbstractFacade.prototype.stackMode = null, 
        AbstractFacade.prototype.stack = null, AbstractFacade.prototype.servicesMap = null, 
        AbstractFacade.log = function(obj) {
            AbstractFacade.isDebug && "console" in window && "object" == typeof console && console.log(obj);
        }, AbstractFacade.isDebug = !0;
        var log = function(obj) {
            for (n = 0; n < arguments.length; n++) AbstractFacade.log(arguments[n]);
        }, setDebug = function(bool) {
            AbstractFacade.isDebug = bool;
        }, in_array = function(needle, haystack, argStrict) {
            var key = "", strict = !!argStrict;
            if (strict) {
                for (key in haystack) if (haystack[key] === needle) return !0;
            } else for (key in haystack) if (haystack[key] == needle) return !0;
            return !1;
        }, clone = function(obj) {
            if (null == obj || "object" != typeof obj) return obj;
            if (obj instanceof Date) {
                var copy = new Date();
                return copy.setTime(obj.getTime()), copy;
            }
            if (obj instanceof Array) {
                for (var copy = [], i = 0, len = obj.length; i < len; i++) copy[i] = clone(obj[i]);
                return copy;
            }
            if (obj instanceof Object) {
                var copy = {};
                for (var attr in obj) obj.hasOwnProperty(attr) && (copy[attr] = clone(obj[attr]));
                return copy;
            }
            throw new Error("Unable to copy obj! Its type isn't supported.");
        };
        scope.better = {
            AbstractProxy: AbstractProxy,
            AbstractMediator: AbstractMediator,
            AbstractCommand: AbstractCommand,
            AbstractFacade: AbstractFacade,
            AbstractService: AbstractService,
            Notification: Notification,
            log: log,
            setDebug: setDebug,
            in_array: in_array,
            clone: clone
        };
    }
}(this), function(scope) {
    function UploadComplete(note) {
        better.AbstractCommand.call(this, note);
    }
    function UploadSuccess(note) {
        better.AbstractCommand.call(this, note);
    }
    function UploadError(note) {
        better.AbstractCommand.call(this, note);
    }
    function LoopQueue(note) {
        better.AbstractCommand.call(this, note);
    }
    function UploadFile(note) {
        better.AbstractCommand.call(this, note);
    }
    function AddUIListeners(note) {
        better.AbstractCommand.call(this, note);
    }
    function ClearList(note) {
        better.AbstractCommand.call(this, note);
    }
    function AddFiles(note) {
        better.AbstractCommand.call(this, note);
    }
    function DropZone(mediatorName, viewComponent) {
        better.AbstractMediator.call(this, mediatorName, viewComponent);
    }
    function List(mediatorName, viewComponent) {
        better.AbstractMediator.call(this, mediatorName, viewComponent);
    }
    function Service(facade, name, configObject) {
        better.AbstractService.call(this, facade, name, configObject);
    }
    if (null == scope && (scope = window), !scope.AttachmentUploadManyService) {
        var Process = {
            INIT_UI: "INIT_UI_UPLOAD"
        }, Notification = {
            VOID: "VOID",
            ADD_UI_LISTENERS: "ADD_UI_LISTENERS_UPLOAD",
            DRAG_EXIT: "DRAG_EXIT",
            DRAG_OVER: "DRAG_OVER",
            ADD_FILES: "ADD_FILES",
            ADD_FILE: "ADD_FILE",
            GET_DROPPED_FILES: "GET_DROPPED_FILES",
            GET_SELECTED_FILES: "GET_SELECTED_FILES",
            CLEAR_LIST: "CLEAR_LIST",
            LOOP_QUEUE: "LOOP_QUEUE",
            UPLOAD_FILE: "UPLOAD_FILE",
            UPLOAD_PROGRESS: "UPLOAD_PROGRESS",
            UPLOAD_SUCCESS: "UPLOAD_SUCCESS",
            UPLOAD_ERROR: "UPLOAD_ERROR",
            UPLOAD_COMPLETE: "UPLOAD_COMPLETE"
        };
        UploadComplete.prototype = new better.AbstractCommand(), UploadComplete.prototype.constructor = UploadComplete, 
        UploadComplete.prototype.execute = function(notification) {
            var uploadedFiles = this.facade.getRessource("uploadedFiles"), errorsFiles = this.facade.getRessource("errorsFiles"), text = "";
            if (errorsFiles.length > 0) {
                text = "Following file(s) encountered problems:\n";
                for (var i = 0; i < errorsFiles.length; i++) text += "\n" + errorsFiles[i] + "\n";
            }
            text = uploadedFiles.length + " files were successfuly uploaded.\n\n" + text;
            var attachments = this.facade.getRessource("attachments");
            this.facade.setRessource("attachments", attachments.concat(better.clone(uploadedFiles))), 
            this.facade.goTo(Notification.CLEAR_LIST), this.facade.goTo("UNLOCK_MODAL"), this.facade.goTo("HIDE_MODAL"), 
            alert(text), this.facade.goTo("SHOW_FILES");
        }, UploadSuccess.prototype = new better.AbstractCommand(), UploadSuccess.prototype.constructor = UploadSuccess, 
        UploadSuccess.prototype.execute = function(notification) {
            var uploadedFiles = this.facade.getRessource("uploadedFiles");
            this.facade.getRessource("checkedFiles");
            uploadedFiles.push(notification.body.response.attachment), this.facade.goTo(Notification.LOOP_QUEUE);
        }, UploadError.prototype = new better.AbstractCommand(), UploadError.prototype.constructor = UploadError, 
        UploadError.prototype.parseError = function(error) {
            if ("string" == typeof error || error instanceof String) return error;
            if ("object" == typeof error || error instanceof Object) for (var i in error) return "(" + i + ")" + this.parseError(error[i]);
            return "";
        }, UploadError.prototype.execute = function(notification) {
            var checkFiles = (this.facade.getRessource("uploadedFiles"), this.facade.getRessource("checkedFiles")), errorsFiles = this.facade.getRessource("errorsFiles"), errors = notification.body.errors, errorExplained = this.parseError(errors);
            "" == errorExplained && (errorExplained = "Unknow problem, server refused to upload file."), 
            errorsFiles.push(notification.body.file.name + " " + errorExplained), 0 == checkFiles.length ? this.facade.goTo(Notification.UPLOAD_COMPLETE) : this.facade.goTo(Notification.LOOP_QUEUE);
        }, LoopQueue.prototype = new better.AbstractCommand(), LoopQueue.prototype.constructor = LoopQueue, 
        LoopQueue.prototype.execute = function(notification) {
            var uploadedFiles = this.facade.getRessource("uploadedFiles"), checkFiles = this.facade.getRessource("checkedFiles");
            if (0 == checkFiles.length && 0 == uploadedFiles) return void alert("No file to upload!");
            if (0 == checkFiles.length) return void this.facade.goTo(Notification.UPLOAD_COMPLETE);
            this.facade.goTo("LOCK_MODAL"), this.facade.doesHandleEvent("clear-list") && (this.facade.removeEventHandler("clear-list"), 
            this.facade.removeEventHandler("loop-queue")), $(".bad-upload-item").remove();
            var file = checkFiles.shift();
            this.facade.setRessource("checkedFiles", checkFiles), this.facade.goTo(Notification.UPLOAD_FILE, {
                file: file
            });
        }, UploadFile.prototype = new better.AbstractCommand(), UploadFile.prototype.constructor = UploadFile, 
        UploadFile.prototype.execute = function(notification) {
            var file = notification.body.file, xhr = new XMLHttpRequest(), context = this, upload = xhr.upload;
            upload.addEventListener("progress", function(ev) {
                ev.lengthComputable && context.facade.goTo(Notification.UPLOAD_PROGRESS, {
                    percent: Math.round(ev.loaded / ev.total * 100),
                    jQuerySelector: file.jQuerySelector
                });
            }, !1), upload.addEventListener("load", function(ev) {}, !1), xhr.onreadystatechange = function(e) {
                var response;
                4 == this.readyState && 200 == this.status && (response = eval("(" + xhr.responseText + ")"), 
                "undefined" != typeof response.status ? 1 == response.status ? context.facade.goTo(Notification.UPLOAD_SUCCESS, {
                    file: file,
                    response: response
                }) : context.facade.goTo(Notification.UPLOAD_ERROR, {
                    file: file,
                    errors: response.errors
                }) : context.facade.goTo(Notification.UPLOAD_ERROR, {
                    file: file,
                    errors: "An upload Error occured!"
                })), 4 == this.readyState && 500 == this.status && (response = eval("(" + xhr.responseText + ")"), 
                context.facade.goTo(Notification.UPLOAD_ERROR, {
                    file: file,
                    errors: response.errors
                }));
            }, upload.addEventListener("error", function(ev) {
                context.facade.goTo(Notification.UPLOAD_ERROR, {
                    file: file,
                    message: "An upload Error occured!"
                });
            }, !1);
            var settings = this.facade.getRessource("settings");
            xhr.open("POST", settings.site_url + "attachments/upload", !0);
            var formData = new FormData();
            formData.append("path", file);
            var tags = $("#tagsinput").val();
            for (var t in tags) formData.append("atags[" + t + "][name]", tags[t].trim());
            $(".optional-fields input, .optional-fields textarea, .optional-fields select").each(function() {
                var $input = $(this), value = $input.val();
                value && formData.append($input.attr("name"), value.trim());
            }), xhr.send(formData);
        }, AddUIListeners.prototype = new better.AbstractCommand(), AddUIListeners.prototype.constructor = AddUIListeners, 
        AddUIListeners.prototype.execute = function(notification) {
            var mediator = this.facade.retrieveMediator(Mediator.DROPZONE);
            mediator.viewComponent = $("#fileDrop"), mediator = this.facade.retrieveMediator(Mediator.LIST), 
            mediator.viewComponent = $("#fileList"), this.facade.registerEventHandler("dropzone-drag-enter", $("#fileDrop").get(0), "dragenter", {
                name: Notification.VOID,
                body: null,
                type: null
            }, !1, !0), this.facade.registerEventHandler("dropzone-drag-leave", $("#fileDrop").get(0), "dragleave", {
                name: Notification.DRAG_EXIT,
                body: null,
                type: null
            }, !1, !0), this.facade.registerEventHandler("dropzone-drag-over", $("#fileDrop").get(0), "dragover", {
                name: Notification.DRAG_OVER,
                body: null,
                type: null
            }, !1, !0), this.facade.registerEventHandler("dropzone-drop", $("#fileDrop").get(0), "drop", {
                name: Notification.GET_DROPPED_FILES,
                body: null,
                type: null
            }, !1, !0), this.facade.registerEventHandler("select-files-change", $("#fileField").get(0), "change", {
                name: Notification.GET_SELECTED_FILES,
                body: null,
                type: null
            }, !1, !0), this.facade.registerEventHandler("clear-list", $("#reset").get(0), "click", {
                name: Notification.CLEAR_LIST,
                body: null,
                type: null
            }, !1, !0), this.facade.registerEventHandler("loop-queue", $("#upload").get(0), "click", {
                name: Notification.LOOP_QUEUE,
                body: null,
                type: null
            }, !1, !0), this.nextCommand();
        }, ClearList.prototype = new better.AbstractCommand(), ClearList.prototype.constructor = ClearList, 
        ClearList.prototype.execute = function(notification) {
            this.facade.setRessource("checkedFiles", []), this.facade.setRessource("uploadedFiles", []), 
            this.facade.setRessource("errorsFiles", []), this.nextCommand();
        }, AddFiles.prototype = new better.AbstractCommand(), AddFiles.prototype.constructor = AddFiles, 
        AddFiles.prototype.execute = function(notification) {
            var files = notification.body.files, checkedFiles = [], badFiles = [], settings = this.facade.getRessource("settings"), config = settings;
            config.maxsize = 1048576 * config.maxsize;
            for (var i = 0; i < files.length; i++) {
                var file = files[i], result = better.in_array(file.type, config.types) && file.size < config.maxsize, message = "OK", id = "item" + new Date().getTime() + "file";
                file.jQuerySelector = "#" + id, result ? checkedFiles.push(file) : (message = "", 
                message += file.size > config.maxsize ? "The file is too large" : "", message += "" != message ? " and " : "", 
                message += better.in_array(file.type, config.types) ? "" : "This type is forbbiden", 
                message += "!", badFiles.push(file)), this.facade.goTo(Notification.ADD_FILE, {
                    file: file,
                    accepted: result,
                    id: id,
                    message: message
                });
            }
            this.facade.setRessource("checkedFiles", checkedFiles), badFiles.length > 0 ? checkedFiles.length > 0 ? $("#filelistinfo").html('<div class="alert alert-warning" role="alert"><b>Warning!</b> <b><u>' + badFiles.length + "</u></b> of your file are not elgible for upload. See explaination on red items.</div>") : $("#filelistinfo").html('<div class="alert alert-danger" role="alert"><b>Warning!</b> <b><u>None</u></b> of your file is elgible for upload. See explaination on red items. Clear list and select other files.</div>') : $("#filelistinfo").html('<div class="alert alert-success" role="alert"><b>Well Done!</b> All selected files are eligible for upload!</div>'), 
            delete badFiles, this.nextCommand();
        };
        var Mediator = {
            DROPZONE: "DROPZONE",
            LIST: "LIST"
        };
        DropZone.prototype = new better.AbstractMediator(), DropZone.prototype.constructor = DropZone, 
        DropZone.prototype.listNotificationInterests = function() {
            return [ Notification.DRAG_EXIT, Notification.DRAG_OVER, Notification.GET_DROPPED_FILES, Notification.GET_SELECTED_FILES ];
        }, DropZone.prototype.handleNotification = function(notification) {
            var files;
            switch (notification.name) {
              case Notification.GET_SELECTED_FILES:
                this.facade.goTo(Notification.CLEAR_LIST), files = $("#fileField").prop("files"), 
                this.facade.goTo(Notification.ADD_FILES, {
                    files: files
                });
                break;

              case Notification.GET_DROPPED_FILES:
                files = notification.body.event.dataTransfer.files, this.facade.goTo(Notification.ADD_FILES, {
                    files: files
                }), this.GrayHighlight();
                break;

              case Notification.DRAG_EXIT:
                this.GrayHighlight();
                break;

              case Notification.DRAG_OVER:
                this.GreenHighlight();
            }
        }, DropZone.prototype.GrayHighlight = function() {
            this.viewComponent.css({
                "background-color": "#FEFEFE",
                "border-color": "#CCC",
                color: "#CCC"
            });
        }, DropZone.prototype.GreenHighlight = function() {
            this.viewComponent.css({
                "background-color": "#F0FCF0",
                "border-color": "#3DD13F",
                color: "#3DD13F"
            });
        }, List.prototype = new better.AbstractMediator(), List.prototype.constructor = List, 
        List.prototype.listNotificationInterests = function() {
            return [ Notification.ADD_FILE, Notification.CLEAR_LIST, Notification.UPLOAD_FILE, Notification.UPLOAD_PROGRESS, Notification.UPLOAD_ERROR, Notification.UPLOAD_SUCCESS ];
        }, List.prototype.handleNotification = function(notification) {
            switch (notification.name) {
              case Notification.UPLOAD_SUCCESS:
                this.finishItem(notification.body.file.jQuerySelector);
                break;

              case Notification.UPLOAD_ERROR:
                this.finishItem(notification.body.jQuerySelector);
                break;

              case Notification.ADD_FILE:
                this.addFile(notification.body.file, notification.body.id, notification.body.accepted, notification.body.message);
                break;

              case Notification.CLEAR_LIST:
                this.viewComponent.empty(), $("#filelistinfo").empty();
                break;

              case Notification.UPLOAD_PROGRESS:
                $(notification.body.jQuerySelector).find(".progress-bar .sr-only").html(notification.body.percent + "%"), 
                $(notification.body.jQuerySelector).find(".progress-bar").width(notification.body.percent + "%");
                break;

              case Notification.UPLOAD_FILE:
                $(notification.body.file.jQuerySelector).find(".progress-bar").width("0%"), $(notification.body.file.jQuerySelector).find(".progress-bar .sr-only").html("0%"), 
                $(notification.body.file.jQuerySelector).find(".progress").addClass("active");
            }
            $(scope).trigger("resize");
        }, List.prototype.finishItem = function(jQuerySelector) {
            $(jQuerySelector).remove();
        }, List.prototype.addFile = function(file, id, accepted, message) {
            var itemStyle = accepted ? "upload-item" : "bad-upload-item", fileSize = Math.round(file.size / 1024);
            fileSize = fileSize > 999 ? Math.round(fileSize / 1024) + "MB" : fileSize + "KB";
            var item = '<div id="' + id + '" class="' + itemStyle + '"><table style="width:100%;"><tr><td width="85px"><div><img src="' + this.makeNiceIcons(file) + '" width="100%" /></div></td><td ><p class="upload-item-name">' + file.name + " - " + message + "</p><p>File type: (" + file.type + ") - " + fileSize + '</p><div class="progress progress-striped"><div class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width:0px;"><span class="sr-only"></span></div></div></td></tr></table></div>';
            this.viewComponent.append(item);
        }, List.prototype.makeNiceIcons = function(file) {
            var name = file.name, extention = name.substr(name.lastIndexOf(".") + 1, 8), ico = "file_default.png";
            switch (extention) {
              case "wav":
              case "mp3":
                ico = "audio.png";
                break;

              case "pdf":
              case "rar":
              case "zip":
                ico = "file_" + extention.toLowerCase() + ".png";
                break;

              case "JPEG":
              case "JPG":
              case "PNG":
              case "GIF":
              case "bmp":
              case "jpg":
              case "jpeg":
              case "gif":
              case "png":
              case "tiff":
                ico = "image_" + extention.toLowerCase() + ".png";
                break;

              case "MOV":
              case "mov":
              case "wmv":
              case "ogg":
              case "ogv":
              case "avi":
              case "mpg":
              case "mp4":
                ico = "video.png";
            }
            return this.facade.getRessource("settings").site_url + "img/attachment/" + ico;
        }, Service.prototype = new better.AbstractService(), Service.prototype.constructor = Service, 
        Service.prototype.initProxies = function(configObject) {}, Service.prototype.initMediators = function(configObject) {
            this.facade.registerMediator(new DropZone(Mediator.DROPZONE, $("#fileDrop"))), this.facade.registerMediator(new List(Mediator.LIST, $("#fileList")));
        }, Service.prototype.initCommands = function(configObject) {
            this.facade.registerCommand(Notification.ADD_UI_LISTENERS, AddUIListeners), this.facade.registerCommand(Notification.ADD_FILES, AddFiles), 
            this.facade.registerCommand(Notification.CLEAR_LIST, ClearList), this.facade.registerCommand(Notification.LOOP_QUEUE, LoopQueue), 
            this.facade.registerCommand(Notification.UPLOAD_FILE, UploadFile), this.facade.registerCommand(Notification.UPLOAD_SUCCESS, UploadSuccess), 
            this.facade.registerCommand(Notification.UPLOAD_ERROR, UploadError), this.facade.registerCommand(Notification.UPLOAD_COMPLETE, UploadComplete);
        }, Service.prototype.initProcesses = function(configObject) {
            this.facade.registerProcess(Process.INIT_UI, [ Notification.ADD_UI_LISTENERS ]);
        }, Service.prototype.runInstall = function(configObject) {
            this.facade.setRessource("checkedFiles", []), this.facade.setRessource("uploadedFiles", []), 
            this.facade.setRessource("errorsFiles", []);
        }, Service.NAME = "Attachment Upload Many Service", Service.Dictionary = {
            Process: Process,
            Notification: Notification,
            Mediator: Mediator
        }, scope.better.AttachmentUploadManyService = Service;
    }
}(this), function(scope) {
    function AddUIListeners(note) {
        better.AbstractCommand.call(this, note);
    }
    function PostEmbed(note) {
        better.AbstractCommand.call(this, note);
    }
    function Service(facade, name, configObject) {
        better.AbstractService.call(this, facade, name, configObject);
    }
    if (null == scope && (scope = window), !scope.AttachmentEmbedService) {
        var Process = {
            INIT_UI: "INIT_UI_EMBED"
        }, Notification = {
            ADD_UI_LISTENERS: "ADD_UI_LISTENERS_EMBED",
            POST_EMBED: "POST_EMBED"
        };
        AddUIListeners.prototype = new better.AbstractCommand(), AddUIListeners.prototype.constructor = AddUIListeners, 
        AddUIListeners.prototype.execute = function(notification) {
            this.facade.registerEventHandler("embed-submit", $("#attachment-embed-submit").get(0), "click", {
                name: Notification.POST_EMBED,
                body: null,
                type: null
            }, !1, !0), this.nextCommand();
        }, PostEmbed.prototype = new better.AbstractCommand(), PostEmbed.prototype.constructor = PostEmbed, 
        PostEmbed.prototype.execute = function(notification) {
            var settings = this.facade.getRessource("settings"), url = settings.site_url + "attachments/upload";
            if (null == $("#attachment-name").val() || "" == $("#attachment-name").val()) return alert("Please fill in a name!");
            if (null == $("#attachment-embed").val() || "" == $("#attachment-embed").val()) return alert("Please fill in a embed code!");
            var data = {
                name: $("#attachment-name").val(),
                embed: $("#attachment-embed").val()
            }, tags = $("#tagsinput").val();
            for (var t in tags) data["atags[" + t + "][name]"] = tags[t].trim();
            $(".optional-fields input, .optional-fields textarea, .optional-fields select").each(function() {
                var $input = $(this), value = $input.val();
                value && (data[$input.attr("name")] = value.trim());
            }), $.ajax({
                url: url,
                type: "POST",
                data: data,
                dataType: "json",
                context: this
            }).fail(this.fail).done(this.done);
        }, PostEmbed.prototype.parseError = function(error) {
            if ("string" == typeof error || error instanceof String) return error;
            if ("object" == typeof error || error instanceof Object) for (var i in error) return "(" + i + ")" + this.parseError(error[i]);
            return "";
        }, PostEmbed.prototype.fail = function() {
            alert("Une erreur c'est produite lors du chargement des données");
        }, PostEmbed.prototype.done = function(data) {
            if (console.log(data), 1 != data.data.status) {
                var errorExplained = this.parseError(data.data.errors);
                return "" == errorExplained && (errorExplained = "Unknow problem, server refused to save embde code."), 
                alert("Sorry, we encountered problems:\n\n" + errorExplained);
            }
            var file = data.attachment;
            alert("Your file was successfuly uploaded!"), this.facade.goTo("UNLOCK_MODAL");
            var attachments = this.facade.getRessource("attachments");
            attachments.push(file), this.facade.setRessource("attachments", attachments), this.facade.goTo(Notification.CLEAR_LIST), 
            this.facade.goTo("SHOW_FILES"), this.nextCommand();
        };
        var Mediator = {};
        Service.prototype = new better.AbstractService(), Service.prototype.constructor = Service, 
        Service.prototype.initProxies = function(configObject) {}, Service.prototype.initMediators = function(configObject) {}, 
        Service.prototype.initCommands = function(configObject) {
            this.facade.registerCommand(Notification.ADD_UI_LISTENERS, AddUIListeners), this.facade.registerCommand(Notification.POST_EMBED, PostEmbed);
        }, Service.prototype.initProcesses = function(configObject) {
            this.facade.registerProcess(Process.INIT_UI, [ Notification.ADD_UI_LISTENERS ]);
        }, Service.prototype.runInstall = function(configObject) {}, Service.NAME = "Attachment Embed Service", 
        Service.Dictionary = {
            Process: Process,
            Notification: Notification,
            Mediator: Mediator
        }, scope.better.AttachmentEmbedService = Service;
    }
}(this), function(scope) {
    function BrowseDisplay(note) {
        better.AbstractCommand.call(this, note);
    }
    function AjaxPost(note) {
        better.AbstractCommand.call(this, note);
    }
    function ChooseManyList(mediatorName, viewComponent) {
        better.AbstractMediator.call(this, mediatorName, viewComponent);
    }
    function Service(facade, name, configObject) {
        better.AbstractService.call(this, facade, name, configObject);
    }
    if (null == scope && (scope = window), !scope.AttachmentChoosedManyService) {
        var Process = {
            INIT_UI: "INIT_UI_CHOOSE",
            BROWSE: "BROWSE",
            BROWSE_POST: "BROWSE_POST"
        }, Notification = {
            BROWSE_DISPLAY: "BROWSE_DISPLAY",
            AJAX_POST: "AJAX_POST",
            MAKE_ADD_THUMB: "MAKE_ADD_THUMB",
            MAKE_REMOVE_THUMB: "MAKE_REMOVE_THUMB",
            SHOW_CHOOSE_MANY_SELECTION: "SHOW_CHOOSE_MANY_SELECTION"
        };
        BrowseDisplay.prototype = new better.AbstractCommand(), BrowseDisplay.prototype.constructor = BrowseDisplay, 
        BrowseDisplay.prototype.execute = function(notification) {
            this.nextCommand();
        }, AjaxPost.prototype = new better.AbstractCommand(), AjaxPost.prototype.constructor = AjaxPost, 
        AjaxPost.prototype.execute = function(notification) {
            var url = notification.body.url, data = notification.body.data;
            $.ajax({
                url: url,
                data: data,
                type: "POST",
                dataType: "html",
                context: this
            }).fail(this.fail).done(this.done);
        }, AjaxPost.prototype.fail = function() {
            alert("Une erreur c'est produite lors du chargement des données");
        }, AjaxPost.prototype.done = function(data) {
            this.facade.setRessource("loadingData", data), this.nextCommand();
        };
        var Mediator = {
            CHOOSE_MANY_LIST: "CHOOSE_MANY_LIST"
        };
        ChooseManyList.prototype = new better.AbstractMediator(), ChooseManyList.prototype.constructor = ChooseManyList, 
        ChooseManyList.prototype.listNotificationInterests = function() {
            return [ Notification.BROWSE_DISPLAY, Notification.SHOW_CHOOSE_MANY_SELECTION, Notification.MAKE_ADD_THUMB, Notification.MAKE_REMOVE_THUMB, "ADD_FILE_TO_LIST", "REMOVE_FILE_FROM_LIST" ];
        }, ChooseManyList.prototype.handleNotification = function(notification) {
            switch (notification.name) {
              case Notification.BROWSE_DISPLAY:
              case Notification.SHOW_CHOOSE_MANY_SELECTION:
                this.showChooseManySelection();
                break;

              case Notification.MAKE_ADD_THUMB:
              case "REMOVE_FILE_FROM_LIST":
                this.makeAddThumb(notification.body.id);
                break;

              case Notification.MAKE_REMOVE_THUMB:
              case "ADD_FILE_TO_LIST":
                this.makeRemoveThumb(notification.body.id);
            }
        }, ChooseManyList.prototype.makeAddThumb = function(id) {
            $("#attachment-selection-id-" + id).removeClass("selected_thumb").find(".attachment-actions").html("<button type=\"button\" onclick=\"window.attachmentAdd.goTo('ADD_FILE_TO_LIST',{ id: '" + id + '\'});" class="btn btn-primary">Add</button>');
        }, ChooseManyList.prototype.makeRemoveThumb = function(id) {
            $("#attachment-selection-id-" + id).addClass("selected_thumb").find(".attachment-actions").html("<button type=\"button\" onclick=\"window.attachmentAdd.goTo('REMOVE_FILE_FROM_LIST',{ id: '" + id + '\' });" class="btn btn-danger">Remove</button>');
        }, ChooseManyList.prototype.showChooseManySelection = function() {
            $(".modal-body").html(this.facade.getRessource("loadingData")), $("#attachment-filter-by-tags-input").tagsinput({
                confirmKeys: [ 32 ]
            }), $("#attachment-filter-by-search-btn").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault();
                var url = $("#attachment-filter-by-search-form").attr("action"), data = $("#attachment-filter-by-search-input").val();
                window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ url ],
                    asBody: [ !1 ],
                    datas: [ {
                        search: data
                    } ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $("#attachment-filter-by-tags-btn").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault();
                var url = $("#attachment-filter-by-tags-form").attr("action"), data = $("#attachment-filter-by-tags-input").val();
                window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ url ],
                    asBody: [ !1 ],
                    datas: [ {
                        tags: data
                    } ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $("#attachment-filter-by-subtype-btn").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault();
                var url = $("#attachment-filter-by-subtype-form").attr("action"), data = $("#attachment-filter-by-subtype-input").val();
                window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ url ],
                    asBody: [ !1 ],
                    datas: [ {
                        filter: data
                    } ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $("#attachment-sort-by-name").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault();
                var url = $("#attachment-sort-by-name").parent().attr("href");
                window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ url ],
                    asBody: [ !1 ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $("#attachment-sort-by-created").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault(), window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ $("#attachment-sort-by-created").parent().attr("href") ],
                    asBody: [ !1 ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $("#attachment-sort-by-date").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault(), window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ $("#attachment-sort-by-date").parent().attr("href") ],
                    asBody: [ !1 ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $("#attachment-sort-by-subtype").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault(), window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ $("#attachment-sort-by-subtype").parent().attr("href") ],
                    asBody: [ !1 ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $(".attachment-browse .pagination a").bind("click", function(evt) {
                evt.stopPropagation(), evt.preventDefault();
                var $parent = $(this).parent();
                return !$parent.hasClass("disabled") && !$parent.hasClass("active") && void window.attachmentAdd.goTo(Process.BROWSE, {
                    urls: [ $(this).attr("href") ],
                    asBody: [ !1 ],
                    browseType: "get",
                    title: "Choose existing file(s) from your website"
                });
            }), $(".attachment-browse").find(".attachment-thumb").each(function() {
                var id = $(this).find("input").val();
                window.attachmentAdd.goTo("MAKE_ADD_THUMB", {
                    id: id
                });
            });
            for (var attachments = this.facade.getRessource("attachments"), i = 0; i < attachments.length; i++) {
                var id = attachments[i].id;
                window.attachmentAdd.goTo("MAKE_REMOVE_THUMB", {
                    id: id
                });
            }
        }, Service.prototype = new better.AbstractService(), Service.prototype.constructor = Service, 
        Service.prototype.initProxies = function(configObject) {}, Service.prototype.initMediators = function(configObject) {
            this.facade.registerMediator(new ChooseManyList(Mediator.CHOOSE_MANY_LIST, $("#attachment-modal-list")));
        }, Service.prototype.initCommands = function(configObject) {
            this.facade.registerCommand(Notification.BROWSE_DISPLAY, BrowseDisplay), this.facade.registerCommand(Notification.AJAX_POST, AjaxPost);
        }, Service.prototype.initProcesses = function(configObject) {
            this.facade.registerProcess(Process.INIT_UI, [ Notification.BROWSE_DISPLAY ]), this.facade.registerProcess(Process.BROWSE, [ "LOAD_AJAX", Notification.BROWSE_DISPLAY ]), 
            this.facade.registerProcess(Process.BROWSE_POST, [ Notification.AJAX_POST, Notification.BROWSE_DISPLAY ]);
        }, Service.NAME = "Attachment Choose Many Service", Service.Dictionary = {
            Process: Process,
            Notification: Notification,
            Mediator: Mediator
        }, scope.better.AttachmentChoosedManyService = Service;
    }
}(this);